/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DemoAvroTypesYyy extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5000031378166258422L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DemoAvroTypesYyy\",\"namespace\":\"com.example.avro\",\"fields\":[{\"name\":\"field1\",\"type\":[\"boolean\",\"null\"],\"default\":false},{\"name\":\"field2\",\"type\":[\"int\",\"null\"],\"default\":12345},{\"name\":\"field3\",\"type\":[\"string\",\"null\"],\"default\":\"myDefault\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DemoAvroTypesYyy> ENCODER =
      new BinaryMessageEncoder<DemoAvroTypesYyy>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DemoAvroTypesYyy> DECODER =
      new BinaryMessageDecoder<DemoAvroTypesYyy>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DemoAvroTypesYyy> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DemoAvroTypesYyy> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DemoAvroTypesYyy> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DemoAvroTypesYyy>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DemoAvroTypesYyy to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DemoAvroTypesYyy from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DemoAvroTypesYyy instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DemoAvroTypesYyy fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Boolean field1;
   private java.lang.Integer field2;
   private java.lang.CharSequence field3;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DemoAvroTypesYyy() {}

  /**
   * All-args constructor.
   * @param field1 The new value for field1
   * @param field2 The new value for field2
   * @param field3 The new value for field3
   */
  public DemoAvroTypesYyy(java.lang.Boolean field1, java.lang.Integer field2, java.lang.CharSequence field3) {
    this.field1 = field1;
    this.field2 = field2;
    this.field3 = field3;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return field1;
    case 1: return field2;
    case 2: return field3;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: field1 = (java.lang.Boolean)value$; break;
    case 1: field2 = (java.lang.Integer)value$; break;
    case 2: field3 = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'field1' field.
   * @return The value of the 'field1' field.
   */
  public java.lang.Boolean getField1() {
    return field1;
  }


  /**
   * Sets the value of the 'field1' field.
   * @param value the value to set.
   */
  public void setField1(java.lang.Boolean value) {
    this.field1 = value;
  }

  /**
   * Gets the value of the 'field2' field.
   * @return The value of the 'field2' field.
   */
  public java.lang.Integer getField2() {
    return field2;
  }


  /**
   * Sets the value of the 'field2' field.
   * @param value the value to set.
   */
  public void setField2(java.lang.Integer value) {
    this.field2 = value;
  }

  /**
   * Gets the value of the 'field3' field.
   * @return The value of the 'field3' field.
   */
  public java.lang.CharSequence getField3() {
    return field3;
  }


  /**
   * Sets the value of the 'field3' field.
   * @param value the value to set.
   */
  public void setField3(java.lang.CharSequence value) {
    this.field3 = value;
  }

  /**
   * Creates a new DemoAvroTypesYyy RecordBuilder.
   * @return A new DemoAvroTypesYyy RecordBuilder
   */
  public static com.example.avro.DemoAvroTypesYyy.Builder newBuilder() {
    return new com.example.avro.DemoAvroTypesYyy.Builder();
  }

  /**
   * Creates a new DemoAvroTypesYyy RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DemoAvroTypesYyy RecordBuilder
   */
  public static com.example.avro.DemoAvroTypesYyy.Builder newBuilder(com.example.avro.DemoAvroTypesYyy.Builder other) {
    if (other == null) {
      return new com.example.avro.DemoAvroTypesYyy.Builder();
    } else {
      return new com.example.avro.DemoAvroTypesYyy.Builder(other);
    }
  }

  /**
   * Creates a new DemoAvroTypesYyy RecordBuilder by copying an existing DemoAvroTypesYyy instance.
   * @param other The existing instance to copy.
   * @return A new DemoAvroTypesYyy RecordBuilder
   */
  public static com.example.avro.DemoAvroTypesYyy.Builder newBuilder(com.example.avro.DemoAvroTypesYyy other) {
    if (other == null) {
      return new com.example.avro.DemoAvroTypesYyy.Builder();
    } else {
      return new com.example.avro.DemoAvroTypesYyy.Builder(other);
    }
  }

  /**
   * RecordBuilder for DemoAvroTypesYyy instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DemoAvroTypesYyy>
    implements org.apache.avro.data.RecordBuilder<DemoAvroTypesYyy> {

    private java.lang.Boolean field1;
    private java.lang.Integer field2;
    private java.lang.CharSequence field3;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.avro.DemoAvroTypesYyy.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.field1)) {
        this.field1 = data().deepCopy(fields()[0].schema(), other.field1);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.field2)) {
        this.field2 = data().deepCopy(fields()[1].schema(), other.field2);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.field3)) {
        this.field3 = data().deepCopy(fields()[2].schema(), other.field3);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing DemoAvroTypesYyy instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.avro.DemoAvroTypesYyy other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.field1)) {
        this.field1 = data().deepCopy(fields()[0].schema(), other.field1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.field2)) {
        this.field2 = data().deepCopy(fields()[1].schema(), other.field2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.field3)) {
        this.field3 = data().deepCopy(fields()[2].schema(), other.field3);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'field1' field.
      * @return The value.
      */
    public java.lang.Boolean getField1() {
      return field1;
    }


    /**
      * Sets the value of the 'field1' field.
      * @param value The value of 'field1'.
      * @return This builder.
      */
    public com.example.avro.DemoAvroTypesYyy.Builder setField1(java.lang.Boolean value) {
      validate(fields()[0], value);
      this.field1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'field1' field has been set.
      * @return True if the 'field1' field has been set, false otherwise.
      */
    public boolean hasField1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'field1' field.
      * @return This builder.
      */
    public com.example.avro.DemoAvroTypesYyy.Builder clearField1() {
      field1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'field2' field.
      * @return The value.
      */
    public java.lang.Integer getField2() {
      return field2;
    }


    /**
      * Sets the value of the 'field2' field.
      * @param value The value of 'field2'.
      * @return This builder.
      */
    public com.example.avro.DemoAvroTypesYyy.Builder setField2(java.lang.Integer value) {
      validate(fields()[1], value);
      this.field2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'field2' field has been set.
      * @return True if the 'field2' field has been set, false otherwise.
      */
    public boolean hasField2() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'field2' field.
      * @return This builder.
      */
    public com.example.avro.DemoAvroTypesYyy.Builder clearField2() {
      field2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'field3' field.
      * @return The value.
      */
    public java.lang.CharSequence getField3() {
      return field3;
    }


    /**
      * Sets the value of the 'field3' field.
      * @param value The value of 'field3'.
      * @return This builder.
      */
    public com.example.avro.DemoAvroTypesYyy.Builder setField3(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.field3 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'field3' field has been set.
      * @return True if the 'field3' field has been set, false otherwise.
      */
    public boolean hasField3() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'field3' field.
      * @return This builder.
      */
    public com.example.avro.DemoAvroTypesYyy.Builder clearField3() {
      field3 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DemoAvroTypesYyy build() {
      try {
        DemoAvroTypesYyy record = new DemoAvroTypesYyy();
        record.field1 = fieldSetFlags()[0] ? this.field1 : (java.lang.Boolean) defaultValue(fields()[0]);
        record.field2 = fieldSetFlags()[1] ? this.field2 : (java.lang.Integer) defaultValue(fields()[1]);
        record.field3 = fieldSetFlags()[2] ? this.field3 : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DemoAvroTypesYyy>
    WRITER$ = (org.apache.avro.io.DatumWriter<DemoAvroTypesYyy>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DemoAvroTypesYyy>
    READER$ = (org.apache.avro.io.DatumReader<DemoAvroTypesYyy>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.field1 == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeBoolean(this.field1);
    }

    if (this.field2 == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.field2);
    }

    if (this.field3 == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.field3);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 0) {
        in.readNull();
        this.field1 = null;
      } else {
        this.field1 = in.readBoolean();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.field2 = null;
      } else {
        this.field2 = in.readInt();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.field3 = null;
      } else {
        this.field3 = in.readString(this.field3 instanceof Utf8 ? (Utf8)this.field3 : null);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 0) {
            in.readNull();
            this.field1 = null;
          } else {
            this.field1 = in.readBoolean();
          }
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.field2 = null;
          } else {
            this.field2 = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.field3 = null;
          } else {
            this.field3 = in.readString(this.field3 instanceof Utf8 ? (Utf8)this.field3 : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










